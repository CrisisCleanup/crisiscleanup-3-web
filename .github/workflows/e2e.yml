name: E2E Tests

# Run every day at 9:00 AM
# See: https://crontab.guru/examples.html
on:
  schedule:
    - cron: '0 14 * * *'
  workflow_dispatch:

jobs:
  versions:
    name: Get Versions 游닆
    uses: CrisisCleanup/crisiscleanup-4-web/.github/workflows/get-versions.yml@master

  e2e:
    name: 游빍 E2E Tests 游눹 | ${{ matrix.stage }} | ${{ matrix.project }}
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    needs: [versions]
    outputs:
      TEST_STAGE: ${{ steps.results.outputs.TEST_STAGE }}
      TEST_PROJECT: ${{ steps.results.outputs.TEST_PROJECT }}
      TEST_STATUS: ${{ steps.results.outputs.TEST_STATUS }}
    strategy:
      fail-fast: false
      matrix:
        stage: [development, staging, production]
        project: [chromium, firefox, webkit]
        include:
          - project: chromium
            os: ubuntu-latest
            cache_dir: ~/.cache/ms-playwright
          - project: firefox
            os: ubuntu-latest
            cache_dir: ~/.cache/ms-playwright
          - project: webkit
            os: macos-12
            cache_dir: ~/Library/Caches/ms-playwright
    steps:
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.versions.outputs.PNPM_VERSION }}

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.versions.outputs.NODE_VERSION }}
          cache: pnpm

      # NOTE: Using single quotes when setting $GITHUB_ENV in-case secret has special characters
      - name: 游댢 Setup Common Env
        run: |
          echo 'PW_SKIP_WEBSERVER=1' >> $GITHUB_ENV

      - name: 游댢 Setup Development Test Env
        if: matrix.stage == 'development'
        run: |
          echo 'VITE_APP_BASE_URL=https://app.dev.crisiscleanup.io' >> $GITHUB_ENV
          echo 'TEST_APP_EMAIL=${{ secrets.TEST_APP_EMAIL_DEV }}' >> $GITHUB_ENV
          echo 'TEST_APP_PASSWORD=${{ secrets.TEST_APP_PASSWORD_DEV }}' >> $GITHUB_ENV
          echo 'TEST_APP_ADMIN_EMAIL=${{ secrets.TEST_APP_ADMIN_EMAIL_DEV }}' >> $GITHUB_ENV
          echo 'TEST_APP_ADMIN_PASSWORD=${{ secrets.TEST_APP_ADMIN_PASSWORD_DEV }}' >> $GITHUB_ENV

      - name: 游댢 Setup Staging Test Env
        if: matrix.stage == 'staging'
        run: |
          echo 'VITE_APP_BASE_URL=https://app.staging.crisiscleanup.io' >> $GITHUB_ENV
          echo 'TEST_APP_EMAIL=${{ secrets.TEST_APP_EMAIL_PROD }}' >> $GITHUB_ENV
          echo 'TEST_APP_PASSWORD=${{ secrets.TEST_APP_PASSWORD_PROD }}' >> $GITHUB_ENV
          echo 'TEST_APP_ADMIN_EMAIL=${{ secrets.TEST_APP_ADMIN_EMAIL_PROD }}' >> $GITHUB_ENV
          echo 'TEST_APP_ADMIN_PASSWORD=${{ secrets.TEST_APP_ADMIN_PASSWORD_PROD }}' >> $GITHUB_ENV

      - name: 游댢 Setup Production Test Env
        if: matrix.stage == 'production'
        run: |
          echo 'VITE_APP_BASE_URL=https://crisiscleanup.org' >> $GITHUB_ENV
          echo 'TEST_APP_EMAIL=${{ secrets.TEST_APP_EMAIL_PROD }}' >> $GITHUB_ENV
          echo 'TEST_APP_PASSWORD=${{ secrets.TEST_APP_PASSWORD_PROD }}' >> $GITHUB_ENV
          echo 'TEST_APP_ADMIN_EMAIL=${{ secrets.TEST_APP_ADMIN_EMAIL_PROD }}' >> $GITHUB_ENV
          echo 'TEST_APP_ADMIN_PASSWORD=${{ secrets.TEST_APP_ADMIN_PASSWORD_PROD }}' >> $GITHUB_ENV

      - name: Install dependencies
        run: pnpm install

      - name: 游댢 Set Playwright Version
        run: pnpm exec playwright --version > .github/.playwright-version

      - name: 丘뫮잺 Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ${{ matrix.cache_dir }}
          key: ${{ runner.os }}-${{ matrix.project }}-pw-${{ hashFiles('**/.playwright-version') }}

      - name: 游닌 Install ${{ matrix.project }} with Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm exec playwright install --with-deps ${{ matrix.project }}

      - name: 游꿠 Playwright tests
        run: pnpm run test:e2e:${{ matrix.stage }} --project=${{ matrix.project }}

      - name: 游닋 Upload blob report to GitHub Actions Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: all-blob-reports
          path: blob-report
          retention-days: 1

      - id: results
        shell: bash
        if: always()
        run: |
          echo "TEST_STAGE=${{ matrix.stage }}" >> $GITHUB_OUTPUT
          echo "TEST_PROJECT=${{ matrix.project }}" >> $GITHUB_OUTPUT
          # The current status of the job. Possible values are success, failure, or cancelled.
          echo "TEST_STATUS=${{ job.status }}" >> $GITHUB_OUTPUT

  notify-failed:
    name: 游댮 Notify Failure 游댮
    needs: [e2e]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        if: needs.e2e.outputs.TEST_STATUS == 'failure'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/16155344?v=4
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_CHANNEL: 'core'
          SLACK_COLOR: '#D94F37'
          SLACK_TITLE: 'E2e Tests Failed!'
          SLACK_MESSAGE: '游빍 E2e Tests Failed... Someone broke something! 游땭'

  notify-success:
    name: 游릭 Notify Success 游릭
    needs: [e2e]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        if: needs.e2e.outputs.TEST_STATUS == 'success'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/16155344?v=4
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_CHANNEL: 'core'
          SLACK_COLOR: '#13E768'
          SLACK_TITLE: 'E2e Tests Passed!'
          SLACK_MESSAGE: '游빍 E2e Tests Passed!!'

  merge-e2e-reports:
    # Merge reports after playwright-tests, even if some shards have failed
    name: 游댃 Merge Playwright Reports
    if: always()
    needs: [versions, e2e]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.versions.outputs.PNPM_VERSION }}

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.versions.outputs.NODE_VERSION }}
          cache: pnpm

      - name: 游닌 Install dependencies
        run: pnpm install

      - name: 游닌 Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v3
        with:
          name: all-blob-reports
          path: all-blob-reports

      - name: 游댃 Merge all blob reports into HTML Report
        run: pnpm exec playwright merge-reports --reporter html ./all-blob-reports

      - name: 游닋 Upload HTML report
        uses: actions/upload-artifact@v3
        with:
          name: e2e-report-${{ github.run_id }}-attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 7
