name: E2E Tests

# Run every day at 9:00 AM
# See: https://crontab.guru/examples.html
on:
  schedule:
    - cron: '0 14 * * *'
  workflow_dispatch:

jobs:
  versions:
    name: Get Versions 游닆
    uses: CrisisCleanup/crisiscleanup-4-web/.github/workflows/get-versions.yml@master

  e2e:
    name: 游빍 E2E Tests 游눹 | ${{ matrix.stage }} | ${{ matrix.project }}
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    needs: [versions]
    outputs:
      TEST_STAGE: ${{ steps.results.outputs.TEST_STAGE }}
      TEST_PROJECT: ${{ steps.results.outputs.TEST_PROJECT }}
      TEST_SUCCESS: ${{ steps.results.outputs.TEST_SUCCESS }}
    strategy:
      fail-fast: false
      matrix:
        stage: [development, staging, production]
        project: [chromium, firefox, webkit]
        include:
          - project: chromium
            os: ubuntu-latest
            cache_dir: ~/.cache/ms-playwright
          - project: firefox
            os: ubuntu-latest
            cache_dir: ~/.cache/ms-playwright
          - project: webkit
            os: macos-12
            cache_dir: ~/Library/Caches/ms-playwright
    steps:
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.versions.outputs.PNPM_VERSION }}

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.versions.outputs.NODE_VERSION }}
          cache: pnpm

      - name: 游댢 Setup Common Env
        run: |
          echo "PW_SKIP_WEBSERVER=1" >> $GITHUB_ENV

      - name: 游댢 Setup Development Test Env
        if: matrix.stage == 'development'
        run: |
          echo "VITE_APP_BASE_URL=https://app.dev.crisiscleanup.io" >> $GITHUB_ENV
          echo "TEST_APP_EMAIL=${{ secrets.TEST_APP_EMAIL_DEV }}" >> $GITHUB_ENV
          echo "TEST_APP_PASSWORD=${{ secrets.TEST_APP_PASSWORD_DEV }}" >> $GITHUB_ENV

      - name: 游댢 Setup Staging Test Env
        if: matrix.stage == 'staging'
        run: |
          echo "VITE_APP_BASE_URL=https://app.staging.crisiscleanup.io" >> $GITHUB_ENV
          echo "TEST_APP_EMAIL=${{ secrets.TEST_APP_EMAIL_PROD }}" >> $GITHUB_ENV
          echo "TEST_APP_PASSWORD=${{ secrets.TEST_APP_PASSWORD_PROD }}" >> $GITHUB_ENV

      - name: 游댢 Setup Production Test Env
        if: matrix.stage == 'production'
        run: |
          echo "VITE_APP_BASE_URL=https://crisiscleanup.org" >> $GITHUB_ENV
          echo "TEST_APP_EMAIL=${{ secrets.TEST_APP_EMAIL_PROD }}" >> $GITHUB_ENV
          echo "TEST_APP_PASSWORD=${{ secrets.TEST_APP_PASSWORD_PROD }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: pnpm install

      - name: 游댢 Set Playwright Version
        run: pnpm exec playwright --version > .github/.playwright-version

      - name: 丘뫮잺 Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ${{ matrix.cache_dir }}
          key: ${{ runner.os }}-${{ matrix.project }}-pw-${{ hashFiles('**/.playwright-version') }}

      - name: 游닌 Install ${{ matrix.project }} with Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm exec playwright install --with-deps ${{ matrix.project }}

      - name: 游꿠 Playwright tests
        run: pnpm run test:e2e --project=${{ matrix.project }}

      - name: 游늵 Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report-${{ matrix.stage }}-${{ matrix.project }}
          path: playwright-report/
          retention-days: 30

      - id: results
        shell: bash
        run: |
          echo "TEST_STAGE=${{ matrix.stage }}" >> $GITHUB_OUTPUT
          echo "TEST_PROJECT=${{ matrix.project }}" >> $GITHUB_OUTPUT
          if [ ${{ job.status }} == 'success' ]; then
            echo "TEST_SUCCESS=1" >> $GITHUB_OUTPUT
          else
            echo "TEST_SUCCESS=0" >> $GITHUB_OUTPUT
          fi

  notify-failed:
    name: 游댮 Notify Failure 游댮
    needs: [e2e]
    runs-on: ubuntu-latest
    if: needs.e2e.outputs.TEST_SUCCESS == '1'
    steps:
      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2.0.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_CHANNEL: 'core'
          SLACK_COLOR: '#D94F37'
          SLACK_TITLE: 'E2e Tests Failed!'
          SLACK_MESSAGE: ${{ format('游린 游빍 E2e Tests Failed for {0} {1}... Someone broke something! 游땭', needs.e2e.outputs.TEST_STAGE, needs.e2e.outputs.TEST_PROJECT) }}

  notify-success:
    name: 游릭 Notify Success 游릭
    needs: [e2e]
    runs-on: ubuntu-latest
    if: needs.e2e.outputs.TEST_SUCCESS == '0'
    steps:
      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2.0.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_CHANNEL: 'core'
          SLACK_COLOR: '#13E768'
          SLACK_TITLE: 'E2e Tests Passed!'
          SLACK_MESSAGE: ${{ format('游릴 游빍 E2e Tests Passed for {0} {1}', needs.e2e.outputs.TEST_STAGE, needs.e2e.outputs.TEST_PROJECT) }}
