name: CrisisCleanup

on:
  pull_request:
    paths:
      - '**/**.json'
      - '**/**.js'
      - '**/**.vue'
      - '**/**.js.snap'
      - '.github/workflows/*'
  push:
    paths:
      - '**/**.json'
      - '**/**.js'
      - '**/**.vue'
      - '**/**.js.snap'
      - '.github/workflows/*'

env:
  VUE_APP_WHAT_3_WORDS_API_KEY: ${{ secrets.VUE_APP_WHAT_3_WORDS_API_KEY }}
  VUE_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.VUE_APP_GOOGLE_MAPS_API_KEY }}
  VUE_APP_PITNEYBOWES_API_KEY: ${{ secrets.VUE_APP_PITNEYBOWES_API_KEY }}
  VUE_APP_PITNEYBOWES_BASIC_AUTH_TOKEN: ${{ secrets.VUE_APP_PITNEYBOWES_BASIC_AUTH_TOKEN }}
  VUE_APP_API_BASE_URL: 'https://api.staging.crisiscleanup.io'
  CYPRESS_INSTALL_BINARY: 0

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Determine Yarn Cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Node Modules
        uses: actions/cache@v1.0.3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Setup Node.js 12
        uses: actions/setup-node@v1.2.0
        with:
          node-version: '12'

      - name: Install Dependencies
        run: yarn install

      - name: Run Tests
        run: yarn test:unit

      # TODO: Coverage integration
      # - name: Upload Coverage
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}

  lint:
    name: Run Linter
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Determine Yarn Cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Node Modules
        uses: actions/cache@v1.0.3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Setup Node.js 12
        uses: actions/setup-node@v1.2.0
        with:
          node-version: '12'

      - name: Install Dependencies
        run: yarn install

      - name: Run Linter
        run: yarn lint

  build:
    name: Build Site
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Determine Yarn Cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Node Modules
        uses: actions/cache@v1.0.3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Setup Node.js 12
        uses: actions/setup-node@v1.2.0
        with:
          node-version: '12'

      - name: Install Dependencies
        run: yarn install

      - name: Build Site
        run: yarn build

  deploy:
    name: Deploy Staging
    runs-on: ubuntu-latest
    if: "github.ref == 'refs/heads/master' && !contains(github.event.head_commit.message, 'ci-skip-deploy')"
    needs: [test, lint, build]
    steps:
      - uses: actions/checkout@v2

      - name: Determine Yarn Cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Node Modules
        uses: actions/cache@v1.0.3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Setup Node.js 12
        uses: actions/setup-node@v1.2.0
        with:
          node-version: '12'

      - name: Install Dependencies
        run: yarn install

      - name: Deploy Staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
        run: yarn deploy-staging

  invalidate-cache:
    name: Invalidate Cache
    if: "github.ref == 'refs/heads/master' && !contains(github.event.head_commit.message, 'ci-skip-deploy')"
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: chrislennon/action-aws-cli@v1.1
      - name: Invalidate Cache
        run: aws cloudfront create-invalidation --distribution-id E3DNZ4GD3WPDPE --paths "/index.html"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
