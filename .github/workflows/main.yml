name: CrisisCleanup

on:
  create: ~
  release:
    types: [published]
  pull_request:
    paths:
      - '*.json'
      - 'yarn.lock'
      - '**/**.js'
      - '**/**.vue'
      - '**/**.js.snap'
      - '.github/workflows/*'
  push:
    branches:
      - master
    tags:
      - 'v**'
    paths:
      - '*.json'
      - 'yarn.lock'
      - '**/**.js'
      - '**/**.vue'
      - '**/**.js.snap'
      - '.github/workflows/*'
      - 'vue.config.js'

env:
  VUE_APP_WHAT_3_WORDS_API_KEY: ${{ secrets.VUE_APP_WHAT_3_WORDS_API_KEY }}
  VUE_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.VUE_APP_GOOGLE_MAPS_API_KEY }}
  VUE_APP_PITNEYBOWES_API_KEY: ${{ secrets.VUE_APP_PITNEYBOWES_API_KEY }}
  VUE_APP_PITNEYBOWES_BASIC_AUTH_TOKEN: ${{ secrets.VUE_APP_PITNEYBOWES_BASIC_AUTH_TOKEN }}
  VUE_APP_PHONE_DEFAULT_USERNAME: 'covidtest'
  VUE_APP_PHONE_DEFAULT_PASSWORD: 'covidtest'
  VUE_APP_ENGLISH_PHONE_GATEWAY: '124906'
  VUE_APP_SPANISH_PHONE_GATEWAY: '124906'
  VUE_APP_DEFAULT_CALLER_ID: '2722003211'
  VUE_APP_API_BASE_URL: 'https://api.dev.crisiscleanup.io'
  VUE_APP_BASE_URL: 'https://app.dev.crisiscleanup.io'
  VUE_APP_WS_URL: 'wss://socket.dev.crisiscleanup.io'
  VUE_APP_AWS_CCP_REGION: 'us-east-1'
  VUE_APP_CCP_PRINCIPAL: 'arn:aws:iam::240937704012:saml-provider/ccudev'
  VUE_APP_CCP_ROLE: 'arn:aws:iam::240937704012:role/CCUDevConnectRole'
  VUE_APP_CCP_INSTANCE: 87fbcad4-9f58-4153-84e8-d5b7202693e8
  VUE_APP_AWS_CCP_URL: https://ccudev.awsapps.com/connect/ccp-v2/
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_PROPERTIES: sentry.properties
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  CYPRESS_INSTALL_BINARY: 0

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Determine Yarn Cache
        id: yarn-cache-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Node Modules
        id: yarn-cache
        uses: actions/cache@v2.1.0
        with:
          path: ${{ steps.yarn-cache-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install Dependencies
        run: yarn install

      - name: Run Tests
        run: yarn test:unit

      - name: Upload Coverage
        uses: coverallsapp/github-action@v1.1.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  lint:
    name: Run Linter
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Determine Yarn Cache
        id: yarn-cache-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Node Modules
        uses: actions/cache@v2.1.0
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install Dependencies
        run: yarn install

      - name: Run Linter
        run: yarn lint

  cypress:
    name: E2E // Cypress
    runs-on: ubuntu-16.04
    timeout-minutes: 30
    env:
      CI: 1
      VUE_APP_WHAT_3_WORDS_API_KEY: ${{ secrets.VUE_APP_WHAT_3_WORDS_API_KEY }}
      VUE_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.VUE_APP_GOOGLE_MAPS_API_KEY }}
      VUE_APP_PITNEYBOWES_API_KEY: ${{ secrets.VUE_APP_PITNEYBOWES_API_KEY }}
      VUE_APP_PITNEYBOWES_BASIC_AUTH_TOKEN: ${{ secrets.VUE_APP_PITNEYBOWES_BASIC_AUTH_TOKEN }}
      VUE_APP_AWS_CCP_REGION: 'us-east-1'
      VUE_APP_CCP_PRINCIPAL: 'arn:aws:iam::240937704012:saml-provider/ccudev'
      VUE_APP_CCP_ROLE: 'arn:aws:iam::240937704012:role/CCUDevConnectRole'
      VUE_APP_CCP_INSTANCE: 89c1729b-4547-4548-9508-9365b71e586b
      VUE_APP_AWS_CCP_URL: https://ccuhotlinedev.awsapps.com/connect/ccp#
      VUE_APP_API_BASE_URL: 'http://localhost:5000'
      VUE_APP_BASE_URL: 'http://localhost:8080'
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      ECR_REGISTRY: 182237011124.dkr.ecr.us-east-2.amazonaws.com
      IMAGE_TAG: latest
    strategy:
      fail-fast: false
      matrix:
        # run 3 instances of cypress in parallel
        containers: [1, 2, 3]
    steps:
      - uses: actions/checkout@v2

      - name: Determine Yarn Cache
        id: yarn-cache-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Node Modules
        uses: actions/cache@v2.1.0
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-path.outputs.dir }}
          key: yarn-e2e-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-e2e-

      - name: Checkout Api
        uses: actions/checkout@v2
        with:
          repository: 'CrisisCleanup/crisiscleanup-3-api'
          path: 'cc3api'
          token: ${{ secrets.GITHUB_PAT }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_default_region }}

      - name: Login to ECR
        env:
          ECR_REPOSITORY: python-base
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to ECR
        env:
          ECR_REPOSITORY: cc3api-dev
        uses: aws-actions/amazon-ecr-login@v1

      - name: Spin up Api
        run: |
          cd "$GITHUB_WORKSPACE/cc3api"
          echo "CI=1" >> "$GITHUB_WORKSPACE/cc3api/compose/envs/.env-dev"
          docker-compose build --pull app
          docker-compose up -d app postgres elasticsearch

      - name: Install Dependencies
        env:
          CHILD_CONCURRENCY: 1
        run: yarn install

      - name: Patch Cypress Director
        env:
          SORRY_CYP_API_URL: ${{ secrets.SORRY_CYP_API_URL }}
        run: yarn cy:patch

      - uses: zcong1993/setup-dockerize@v1.2.0

      - name: Wait for Api
        run: 'dockerize -wait-retry-interval 5s -timeout 320s -wait http://localhost:5000/health'

      - name: Dump Api Logs
        if: ${{ always() }}
        run: docker-compose logs

      - name: Run Cypress
        uses: cypress-io/github-action@v2.2.2
        with:
          # skip install now
          install: false
          record: true
          parallel: true
          start: yarn serve
          wait-on: 'http://localhost:8080'
          wait-on-timeout: 360
          browser: chrome
          group: 'CI Chrome'
          headless: true
          env: WEB_USER=${{ secrets.CYPRESS_WEB_USER }},WEB_PASS=${{ secrets.CYPRESS_WEB_PASS }},API_URL=http://localhost:5000
        env:
          VUE_APP_API_BASE_URL: 'http://localhost:5000'
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_WEB_USER: ${{ secrets.CYPRESS_WEB_USER }}
          CYPRESS_WEB_PASS: ${{ secrets.CYPRESS_WEB_PASS }}
          CYPRESS_API_URL: 'http://localhost:5000'
          SORRY_CYP_API_URL: ${{ secrets.SORRY_CYP_API_URL }}
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHILD_CONCURRENCY: 1
          VUE_APP_AWS_CCP_REGION: 'us-east-1'
          VUE_APP_CCP_PRINCIPAL: 'arn:aws:iam::240937704012:saml-provider/ccudev'
          VUE_APP_CCP_ROLE: 'arn:aws:iam::240937704012:role/CCUDevConnectRole'
          VUE_APP_CCP_INSTANCE: 89c1729b-4547-4548-9508-9365b71e586b
          VUE_APP_AWS_CCP_URL: https://ccuhotlinedev.awsapps.com/connect/ccp#

  deploy:
    name: Deploy Site
    runs-on: ubuntu-latest
    needs: [test, lint, cypress]
    if: "github.event_name != 'pull_request'"
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
      AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
    steps:
      - uses: actions/checkout@v2

      - name: Determine Yarn Cache
        id: yarn-cache-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Determine Build Number
        id: build-num
        run: echo "::set-output name=build-id::$(echo ${{ github.sha }} | cut -c 1-7)"

      - name: Determine Stage
        id: find-stage
        run: echo "::set-output name=stage::$(if [ '${{ github.event_name }}' = 'create' ]; then echo 'staging'; else echo 'production';fi)"

      - name: Cache Node Modules
        uses: actions/cache@v2.1.0
        with:
          path: ${{ steps.yarn-cache-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Notify Staging
        if: "github.event_name == 'create' && github.event.ref_type == 'tag'"
        uses: rtCamp/action-slack-notify@v2.0.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'core'
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_ICON: ${{ secrets.SLACK_ICON }}
          SLACK_COLOR: '#fece09'
          SLACK_TITLE: 'New Release'
          SLACK_MESSAGE: "Heads up, I'm currently releasing to staging! You can watch my progress at the url above."

      - name: Notify Production
        if: "github.event_name == 'release'"
        uses: rtCamp/action-slack-notify@v2.0.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'core'
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_ICON: ${{ secrets.SLACK_ICON }}
          SLACK_COLOR: '#fece09'
          SLACK_TITLE: 'New Release'
          SLACK_MESSAGE: "Heads up, I'm currently releasing to production! You can watch my progress at the url above."

      - name: Install Dependencies
        run: yarn install

      - name: Create Sentry Release
        if: "github.event_name == 'release' || (github.event_name == 'create' && github.event.ref_type == 'tag')"
        uses: tclindner/sentry-releases-action@v1.1.1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_PROPERTIES: sentry.properties
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        with:
          tagName: ${{ github.ref }}
          environment: ${{ steps.find-stage.outputs.stage }}
          releaseNamePrefix: crisiscleanup-3-web@

      - name: Deploy Development
        env:
          VUE_APP_BUILD: ${{ steps.build-num.outputs.build-id }}
          VUE_APP_STAGE: development
        run: yarn deploy-development

      - name: Deploy Staging
        if: "github.event_name == 'create' && github.event.ref_type == 'tag'"
        env:
          VUE_APP_API_BASE_URL: 'https://api.staging.crisiscleanup.io'
          VUE_APP_BASE_URL: 'https://app.staging.crisiscleanup.io'
          VUE_APP_AWS_CCP_URL: https://ccustaging.awsapps.com/connect/ccp-v2/
          VUE_APP_PHONE_DEFAULT_USERNAME: 'covid'
          VUE_APP_PHONE_DEFAULT_PASSWORD: 'covid'
          VUE_APP_ENGLISH_PHONE_GATEWAY: '109989'
          VUE_APP_SPANISH_PHONE_GATEWAY: '114659'
          VUE_APP_DEFAULT_CALLER_ID: '8004511954'
          VUE_APP_CCP_PRINCIPAL: 'arn:aws:iam::240937704012:saml-provider/ccustaging'
          VUE_APP_CCP_ROLE: 'arn:aws:iam::240937704012:role/CCUStagingConnectRole'
          VUE_APP_CCP_INSTANCE: 414df788-cd99-4580-ad07-f8af22246ce5
          VUE_APP_BUILD: ${{ steps.build-num.outputs.build-id }}
          VUE_APP_WS_URL: 'wss://socket.staging.crisiscleanup.io'
          VUE_APP_STAGE: staging
        run: yarn deploy-staging

      - name: Deploy Production
        if: "github.event_name == 'release'"
        env:
          VUE_APP_API_BASE_URL: 'https://api.crisiscleanup.org'
          VUE_APP_BASE_URL: 'https://crisiscleanup.org'
          VUE_APP_AWS_CCP_URL: https://cculive.awsapps.com/connect/ccp-v2/
          VUE_APP_PHONE_DEFAULT_USERNAME: 'covid'
          VUE_APP_PHONE_DEFAULT_PASSWORD: 'covid'
          VUE_APP_ENGLISH_PHONE_GATEWAY: '109989'
          VUE_APP_SPANISH_PHONE_GATEWAY: '114659'
          VUE_APP_DEFAULT_CALLER_ID: '8004511954'
          VUE_APP_WS_URL: 'wss://socket.crisiscleanup.org'
          VUE_APP_CCP_PRINCIPAL: 'arn:aws:iam::240937704012:saml-provider/ccuproduction'
          VUE_APP_CCP_ROLE: 'arn:aws:iam::240937704012:role/CCUProductionConnectRole'
          VUE_APP_CCP_INSTANCE: cd54a377-8223-4c43-8524-a21d2837b7c5
          VUE_APP_BUILD: ${{ steps.build-num.outputs.build-id }}
          VUE_APP_STAGE: production
        run: yarn deploy-production

      - name: Post Notify Staging
        if: "github.event_name == 'create' && github.event.ref_type == 'tag'"
        uses: rtCamp/action-slack-notify@v2.0.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'core'
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_ICON: ${{ secrets.SLACK_ICON }}
          SLACK_COLOR: '#fece09'
          SLACK_TITLE: 'Live Release'
          SLACK_MESSAGE: ':rocket: Staging is live! Check it out at: https://app.staging.crisiscleanup.io'

      - name: Post Notify Production
        if: "github.event_name == 'release'"
        uses: rtCamp/action-slack-notify@v2.0.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'core'
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_ICON: ${{ secrets.SLACK_ICON }}
          SLACK_COLOR: '#fece09'
          SLACK_TITLE: 'Live Release'
          SLACK_MESSAGE: ':rocket: Production is live! Check it out at: https://crisiscleanup.org'

      - name: Notify Failed
        if: "((github.event_name == 'release') || (github.event_name == 'create' && github.event.ref_type == 'tag')) && failure()"
        uses: rtCamp/action-slack-notify@v2.0.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'core'
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_ICON: ${{ secrets.SLACK_ICON }}
          SLACK_COLOR: '#D94F37'
          SLACK_TITLE: 'Deploy Failed!'
          SLACK_MESSAGE: 'Failed to deploy... someone broke something! :frowning:'
