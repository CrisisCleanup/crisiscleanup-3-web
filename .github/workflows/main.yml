name: CrisisCleanup

on:
  create: ~
  release:
    types: [published]
  pull_request:
    paths:
      - '*.json'
      - 'yarn.lock'
      - '**/**.js'
      - '**/**.vue'
      - '**/**.js.snap'
      - '.github/workflows/*'
  push:
    paths:
      - '*.json'
      - 'yarn.lock'
      - '**/**.js'
      - '**/**.vue'
      - '**/**.js.snap'
      - '.github/workflows/*'
      - 'vue.config.js'

env:
  VUE_APP_WHAT_3_WORDS_API_KEY: ${{ secrets.VUE_APP_WHAT_3_WORDS_API_KEY }}
  VUE_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.VUE_APP_GOOGLE_MAPS_API_KEY }}
  VUE_APP_PITNEYBOWES_API_KEY: ${{ secrets.VUE_APP_PITNEYBOWES_API_KEY }}
  VUE_APP_PITNEYBOWES_BASIC_AUTH_TOKEN: ${{ secrets.VUE_APP_PITNEYBOWES_BASIC_AUTH_TOKEN }}
  VUE_APP_API_BASE_URL: 'https://api.dev.crisiscleanup.io'
  VUE_APP_BASE_URL: 'https://app.dev.crisiscleanup.io'
  VUE_APP_AWS_CCP_REGION: 'us-east-1'
  VUE_APP_CCP_PRINCIPAL: 'arn:aws:iam::240937704012:saml-provider/ccudev'
  VUE_APP_CCP_ROLE: 'arn:aws:iam::240937704012:role/CCUDevConnectRole'
  VUE_APP_CCP_INSTANCE: 89c1729b-4547-4548-9508-9365b71e586b
  VUE_APP_AWS_CCP_URL: https://cchotline.awsapps.com/connect/ccp#
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_PROPERTIES: sentry.properties
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  CYPRESS_INSTALL_BINARY: 0

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Determine Yarn Cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Node Modules
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Setup Node.js 12
        uses: actions/setup-node@v1.2.0
        with:
          node-version: '12'

      - name: Install Dependencies
        run: yarn install

      - name: Run Tests
        run: yarn test:unit

      # TODO: Coverage integration
      # - name: Upload Coverage
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}

  lint:
    name: Run Linter
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Determine Yarn Cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Node Modules
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Setup Node.js 12
        uses: actions/setup-node@v1.2.0
        with:
          node-version: '12'

      - name: Install Dependencies
        run: yarn install

      - name: Run Linter
        run: yarn lint

  deploy:
    name: Deploy Site
    runs-on: ubuntu-latest
    if: "(github.event_name == 'create' || github.event_name == 'release' || github.ref == 'refs/heads/master' ) && !contains(github.event.head_commit.message, 'ci-skip-deploy')"
    needs: [test, lint]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
      AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
    steps:
      - uses: actions/checkout@v2

      - name: Determine Yarn Cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Node Modules
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Setup Node.js 12
        uses: actions/setup-node@v1.2.0
        with:
          node-version: '12'

      - name: Install Dependencies
        run: yarn install

      - name: Deploy Development
        run: yarn deploy-development

      - name: Notify Staging
        if: "github.event_name == 'create' && github.event.ref_type == 'tag'"
        uses: rtCamp/action-slack-notify@v2.0.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'core'
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_ICON: ${{ secrets.SLACK_ICON }}
          SLACK_COLOR: '#fece09'
          SLACK_TITLE: 'New Release'
          SLACK_MESSAGE: "Heads up, I'm currently releasing to staging! You can watch my progress as the url above."

      - name: Notify Production
        if: "github.event_name == 'release'"
        uses: rtCamp/action-slack-notify@v2.0.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'core'
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_ICON: ${{ secrets.SLACK_ICON }}
          SLACK_COLOR: '#fece09'
          SLACK_TITLE: 'New Release'
          SLACK_MESSAGE: "Heads up, I'm currently releasing to production! You can watch my progress as the url above."

      - name: Deploy Staging
        if: "github.event_name == 'create' && github.event.ref_type == 'tag'"
        env:
          VUE_APP_API_BASE_URL: 'https://api.staging.crisiscleanup.io'
          VUE_APP_BASE_URL: 'https://app.staging.crisiscleanup.io'
          VUE_APP_CCP_PRINCIPAL: 'arn:aws:iam::240937704012:saml-provider/ccustaging'
          VUE_APP_CCP_ROLE: 'arn:aws:iam::240937704012:role/CCUStagingConnectRole'
        run: yarn deploy-staging

      - name: Deploy Production
        if: "github.event_name == 'release'"
        env:
          VUE_APP_API_BASE_URL: 'https://api.crisiscleanup.org'
          VUE_APP_BASE_URL: 'https://crisiscleanup.org'
          VUE_APP_CCP_PRINCIPAL: 'arn:aws:iam::240937704012:saml-provider/ccuproduction'
          VUE_APP_CCP_ROLE: 'arn:aws:iam::240937704012:role/CCUProductionConnectRole'
        run: yarn deploy-production

      - name: Notify Staging Done
        if: "github.event_name == 'create' && github.event.ref_type == 'tag'"
        uses: rtCamp/action-slack-notify@v2.0.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'core'
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_ICON: ${{ secrets.SLACK_ICON }}
          SLACK_COLOR: '#fece09'
          SLACK_TITLE: 'Live Release'
          SLACK_MESSAGE: ':rocket: Staging is live! Check it out at: https://app.staging.crisiscleanup.io'

      - name: Notify Production Done
        if: "github.event_name == 'release'"
        uses: rtCamp/action-slack-notify@v2.0.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'core'
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_ICON: ${{ secrets.SLACK_ICON }}
          SLACK_COLOR: '#fece09'
          SLACK_TITLE: 'Live Release'
          SLACK_MESSAGE: ':rocket: Production is live! Check it out at: https://crisiscleanup.org'
